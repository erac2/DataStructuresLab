import java.util.*;

public class TreeNode {

	int value;
	TreeNode left;
	TreeNode right;

	public TreeNode(int value) {
		this.value = value;
	}

	public TreeNode(int data, TreeNode left, TreeNode right){
		this.value = data;
		this.left = left;
		this.right = right;
	}

	public static boolean isLeaf(TreeNode node) {
		return (node.left == null && node.right == null);
	}

	public static void printRootToLeafPaths(TreeNode node, Deque<Integer> path)
	{
		// base case
		if (node == null) {
			return;
		}

		path.addLast(node.value);

		if (isLeaf(node)) {
			System.out.println(path);
		}

		printRootToLeafPaths(node.left, path);
		printRootToLeafPaths(node.right, path);

		path.removeLast();
	}

	public static void printRootToLeafPaths(TreeNode node)
	{
		Deque<Integer> path = new ArrayDeque<>();
		printRootToLeafPaths(node, path);
	}

	public int findHeight(TreeNode temp){ 
		//Check whether tree is empty  
		if(root == null) {  
			System.out.println("Tree is empty");  
			return 0;  
		}  
		else {  
			int leftHeight = 0, rightHeight = 0;  

			if(temp.left != null)  
				leftHeight = findHeight(temp.left);  

			if(temp.right != null)  
				rightHeight = findHeight(temp.right);  

			int max = (leftHeight > rightHeight) ? leftHeight : rightHeight;  

			return (max + 1);  
		}  
	}

	public static void main(String[]args) {

		TreeNode root = new TreeNode(1);
		root.left = new TreeNode(2);
		root.right = new TreeNode(3);
		root.left.left = new TreeNode(4);
		root.right.left = new TreeNode(5);
		root.right.right = new TreeNode(6);
		root.right.left.right = new TreeNode(7);

		//System.out.println(root);
		printRootToLeafPaths(root);
	}
}
